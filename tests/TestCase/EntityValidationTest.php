<?php

namespace MasaKni\ExceptionRender\Test\TestCase;

use Cake\Core\Configure;
use Cake\Datasource\EntityInterface;
use Cake\TestSuite\TestCase;
use MasaKni\ExceptionRender\EntityValidationListener;
use MasaKni\ExceptionRender\ValidationException;
use MasaKni\ExceptionRender\Test\App\Model\Entity\Actor;
use MasaKni\ExceptionRender\Test\App\Model\Table\ActorsTable;

class EntityValidationTest extends TestCase
{
    /**
     * @var string[]
     */
    public $fixtures = [
        'plugin.MasaKni/ExceptionRender.Actors',
    ];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        static::setAppNamespace('MasaKni\ExceptionRender\Test\App');
    }

    public function test_validation(): void
    {
        new EntityValidationListener();

        $actorsTable = new ActorsTable();
        $actor = $actorsTable->patchEntity($actorsTable->newEmptyEntity(), [
            'first_name' => 'First',
            'last_name' => 'last'
        ]);

        $this->assertInstanceOf(Actor::class, $actor);
    }

    public function test_validation_exception(): void
    {
        $this->expectException(ValidationException::class);

        new EntityValidationListener();

        $actorsTable = new ActorsTable();
        $actorsTable->patchEntity($actorsTable->newEmptyEntity(), [
            'first_name' => '',
            'last_name' => ''
        ]);
    }

    public function test_validation_exception_get_entity(): void
    {
        $this->expectException(ValidationException::class);

        new EntityValidationListener();

        $actorsTable = new ActorsTable();
        $entity = $actorsTable->patchEntity($actorsTable->newEmptyEntity(), [
            'first_name' => '',
            'last_name' => ''
        ]);
        $this->assertInstanceOf(EntityInterface::class, $entity);
    }

    public function test_validation_exception_does_not_run_when_cli(): void
    {
        Configure::write('MasaKni.ExceptionRender.entity_validation', false);
        new EntityValidationListener();

        $actorsTable = new ActorsTable();
        $entity = $actorsTable->patchEntity($actorsTable->newEmptyEntity(), [
            'first_name' => '',
            'last_name' => ''
        ]);

        $this->assertInstanceOf(EntityInterface::class, $entity);
    }
}
